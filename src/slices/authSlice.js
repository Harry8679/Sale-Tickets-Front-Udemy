import { createSlice } from "@reduxjs/toolkit";

// âœ… Ã‰tat initial de l'authentification
const initialState = {
  user: JSON.parse(localStorage.getItem("user")) || null, // RÃ©cupÃ¨re l'utilisateur s'il est stockÃ© en local
  token: localStorage.getItem("token") || null, // RÃ©cupÃ¨re le token s'il est stockÃ©
};

// âœ… CrÃ©ation du slice Redux pour l'auth
const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    // ðŸ“Œ Action pour dÃ©finir l'utilisateur
    setUser: (state, action) => {
      state.user = action.payload.user;
      state.token = action.payload.token;
      localStorage.setItem("user", JSON.stringify(action.payload.user));
      localStorage.setItem("token", action.payload.token);
    },

    // ðŸ“Œ Action pour dÃ©connecter l'utilisateur
    logout: (state) => {
      state.user = null;
      state.token = null;
      localStorage.removeItem("user");
      localStorage.removeItem("token");
    },
  },
});

// âœ… Export des actions
export const { setUser, logout } = authSlice.actions;

// âœ… Export du reducer
export default authSlice.reducer;